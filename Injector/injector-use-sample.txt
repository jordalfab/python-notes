Example:
Let's say we have a Settings class that represents configuration settings for our application. We also have an UnsafeTypedSettings class that might represent some less safe or raw configuration settings.

from injector import Injector, inject, Binder

# Define the Settings class (this could be any settings configuration class)
class Settings:
    def __init__(self):
        self.setting_value = "Default Setting"

# Define the UnsafeTypedSettings class (unsafe or alternative settings)
class UnsafeTypedSettings(Settings):
    def __init__(self):
        super().__init__()
        self.setting_value = "Unsafe Typed Setting"

# Define a service or component that needs Settings
class Application:
    @inject
    def __init__(self, settings: Settings):
        self.settings = settings

    def run(self):
        print(f"Running with setting: {self.settings.setting_value}")

# Define a function that binds Settings to UnsafeTypedSettings
def configure(binder: Binder):
    binder.bind(Settings, to=UnsafeTypedSettings)

# Create an Injector instance with auto_bind=True and configure binding
injector = Injector(configure, auto_bind=True)

# Create an instance of Application using the Injector
app = injector.get(Application)

# Run the application to see which settings class is used
app.run()


Explanation of the Code:
1. Settings and UnsafeTypedSettings:
  - Settings is the base class, and UnsafeTypedSettings is a subclass with a slightly different setting value.
2. Application class:
  - This class requires a Settings instance to function. We use the @inject decorator so that the Injector can automatically provide the dependencies (i.e., an instance of Settings).
  - configure is a function that will be called internally by the Injector during its initialization. The Injector automatically passes a Binder object to the configure function, which allows you to set up custom bindings using binder.bind.
3. binder.bind:
  - In the configure function, we tell the Injector to bind Settings to UnsafeTypedSettings. This means that any time Settings is requested, the Injector will provide an instance of UnsafeTypedSettings.
4. Injector with auto_bind=True:
  - This means that if you have classes that aren't manually bound using the Binder, the Injector will attempt to automatically resolve them by instantiating their dependencies based on type hints or class constructors. It reduces the amount of boilerplate, so you only need to bind the things you want to customize (like Settings to UnsafeTypedSettings in this case).
5. Output:
  - When you run the application, you'll see that the Application class gets an instance of UnsafeTypedSettings instead of the regular Settings.

Output:
Running with setting: Unsafe Typed Setting



  
